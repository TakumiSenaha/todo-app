// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: todo.sql

package persistence

import (
	"context"
	"database/sql"
)

const createTodo = `-- name: CreateTodo :one
INSERT INTO todos (
    user_id,
    title,
    due_date,
    priority,
    is_completed
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, user_id, title, due_date, priority, is_completed, created_at, updated_at
`

type CreateTodoParams struct {
	UserID      int32        `json:"user_id"`
	Title       string       `json:"title"`
	DueDate     sql.NullTime `json:"due_date"`
	Priority    int32        `json:"priority"`
	IsCompleted bool         `json:"is_completed"`
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, createTodo,
		arg.UserID,
		arg.Title,
		arg.DueDate,
		arg.Priority,
		arg.IsCompleted,
	)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.DueDate,
		&i.Priority,
		&i.IsCompleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTodo = `-- name: DeleteTodo :exec
DELETE FROM todos
WHERE id = $1 AND user_id = $2
`

type DeleteTodoParams struct {
	ID     int32 `json:"id"`
	UserID int32 `json:"user_id"`
}

func (q *Queries) DeleteTodo(ctx context.Context, arg DeleteTodoParams) error {
	_, err := q.db.ExecContext(ctx, deleteTodo, arg.ID, arg.UserID)
	return err
}

const getTodo = `-- name: GetTodo :one
SELECT id, user_id, title, due_date, priority, is_completed, created_at, updated_at FROM todos
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTodo(ctx context.Context, id int32) (Todo, error) {
	row := q.db.QueryRowContext(ctx, getTodo, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.DueDate,
		&i.Priority,
		&i.IsCompleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTodos = `-- name: ListTodos :many
SELECT id, user_id, title, due_date, priority, is_completed, created_at, updated_at FROM todos
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListTodos(ctx context.Context, userID int32) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, listTodos, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.DueDate,
			&i.Priority,
			&i.IsCompleted,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTodo = `-- name: UpdateTodo :one
UPDATE todos
SET title = $2,
    due_date = $3,
    priority = $4,
    is_completed = $5
WHERE id = $1 AND user_id = $6
RETURNING id, user_id, title, due_date, priority, is_completed, created_at, updated_at
`

type UpdateTodoParams struct {
	ID          int32        `json:"id"`
	Title       string       `json:"title"`
	DueDate     sql.NullTime `json:"due_date"`
	Priority    int32        `json:"priority"`
	IsCompleted bool         `json:"is_completed"`
	UserID      int32        `json:"user_id"`
}

func (q *Queries) UpdateTodo(ctx context.Context, arg UpdateTodoParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, updateTodo,
		arg.ID,
		arg.Title,
		arg.DueDate,
		arg.Priority,
		arg.IsCompleted,
		arg.UserID,
	)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.DueDate,
		&i.Priority,
		&i.IsCompleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
